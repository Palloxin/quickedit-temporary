<?xml version="1.0" encoding="UTF-8"?>
<manual>
    <item search="c">
        <p>A expressão mais simples é procurar uma letra ou palavra específica dentro de um texto. Funciona como em qualquer programa a opção "Pesquisar".</p>
        <p>Por exemplo, se você procurar a letra "d", a expressão regular procurará essa mesma letra "d". Se procurarmos a palavra "olá", a expressão seria "olá". Tão simples como isso.</p>
    </item>
    <item search=".">
        <p>O ponto em regex define qualquer caractere (número, letra, caractere especial).</p>
        <p>Se procurarmos por qualquer caractere seguido pela letra a, por exemplo "5a", "da", "@a", o padrão seria o seguinte ".a".</p>
        <p>Essa expressão dá muito a outras, como grupos ou quantificadores. Por exemplo, se quisermos encontrar quaisquer 5 caracteres, podemos usar ". {5}".</p>
    </item>
    <item>
        <searches>
            <search element="\\w"/>
            <search element="\\d"/>
            <search element="\\s"/>
        </searches>
        <p>As expressões regulares "{line}w", "{line}d", "{line}s" definem qualquer letra, qualquer dígito ou espaço respectivamente.</p>
        <p>Como o ponto pode ser definido com outras expressões (grupos, quantificadores). Por exemplo, para encontrar duas letras seguidas de um espaço e um número (por exemplo, "aB 3"), poderíamos usar este regex "{linha}w{2}{linha}s{linha}d"</p>
    </item>
    <item>
        <searches>
            <search element="\\W"/>
            <search element="\\D"/>
            <search element="\\S"/>
        </searches>
        <p>As expressões regulares "{line}W", "{line}D", "{line}S" definem um padrão onde uma letra, um dígito ou um espaço, respectivamente, NÃO é encontrado.</p>
        <p>Isso quer dizer que funciona da seguinte maneira, se procurarmos por qualquer caractere diferente de espaço, poderíamos usar "{line}S".</p>
        <p>Por exemplo, vamos procurar o texto "5Q@." (Qualquer caractere sem espaço), poderíamos usar {line}S{4}.</p>
    </item>
    <item search="[abc]">
        <p>Esta expressão encontra qualquer correspondência que esteja dentro do conjunto.</p>
        <p>Desta forma, a expressão [bcd] encontra os textos "b", "c" ou "d".</p>
        <p>Você também pode usar expressões dentro, por exemplo [{line}w{line}d-@] você encontrará qualquer caractere alfanumérico, hífen ou símbolo "@".</p>
        <p>Como as expressões anteriores podem ser agrupadas ou usar quantificadores.</p>
        <p>Um uso especial de conjuntos são os intervalos, permite que você especifique o número ou a letra de onde você começa e o último. Por exemplo, [A-Z] encontraria qualquer letra entre "A" e "Z". (Para minúsculas, você pode usar [a-z].)</p>
        <p>Por exemplo, para pesquisar letras entre "r" e "u" e entre "c" e "e", você pode usar "[r-uc-e]".</p>
    </item>
    <item search="[^abc]">
        <p>É a negação de um conjunto, ou seja, se [abc] encontrou alguma coincidência com "a", "b" ou "c". O conjunto negado [^abc] encontrará qualquer caractere diferente de "a", "b", "c".</p>
        <p>Todas as regras definidas funcionam em negação.</p>
    </item>
    <item>
        <searches>
            <search element="^"/>
            <search element="$"/>
        </searches>
        <p>As expressões "^" e "$" servem para marcar o início e o fim da string. Por exemplo, procurando o padrão "a", você encontrará todas as letras "a" no texto, no entanto, pesquisar por "a$" encontrará a última letra da string, se for um "a".</p>
        <p>"5a" (string começando com número) -&gt; "^{line}d"</p>
    </item>
    <item search="\\b">
        <p>A expressão {line}b é usada para marcar um caractere não visível como o início e o fim da string ou espaços.</p>
        <p>Por exemplo: </p>
        <p>Para a expressão "{line}bye{line}b", você encontraria o texto "ye", mas não o texto "bye", pois b não corresponde a um espaço, início ou fim de string.</p>
    </item>
    <item search="\\B">
        <p>A expressão {line}B é usada para marcar uma palavra ilimitada (caractere visível)</p>
        <p>Por exemplo: </p>
        <p>Para a expressão "{line}Bye", você encontraria o texto "bye", mas não o texto "ye", pois antes havia um caractere não visível (no início da linha)</p>
    </item>
    <item search="\\.">
        <p>Quando queremos encontrar um caractere reservado por regex, usamos o caractere de escape "{line}".</p>
        <p>Por exemplo, se quisermos encontrar um ponto no final do texto, NÃO podemos usar ".$", Pois o ponto representa qualquer caractere. Então usamos o caractere de escape, dessa forma seria parecido com "{line}.$".</p>
        <p>Por exemplo, se eu quiser encontrar o texto "{line}w", eu usaria a expressão "{line}{line}w".</p>
    </item>
    <item search="(abc)">
        <p>Você pode agrupar as correspondências para opções de substituição ou outros utilitários.</p>
        <p>Por exemplo, se usarmos esta expressão "^({line}w).+" Irá procurar qualquer string que comece com uma letra, mas capture a letra inicial.</p>
        <p>Se quiséssemos obtê-lo, o uso de replace com a expressão "$1" retornaria a letra inicial.</p>
        <p>O +, * e ? Funcionam como quantificadores 1 ou mais, 0 ou mais, 0 ou 1 e respectivamente podem ser usados &#x200B;&#x200B;com o grupo, por exemplo "({line}w{line}d)?a", corresponde se encontrar o "a" e/ou se tiver uma letra e número à frente com esse grupo atrás de "a".</p>
    </item>
    <item>
        <searches>
            <search element="(?:abc)"/>
            <search element="(?=abc)"/>
            <search element="(?!abc)"/>
        </searches>
        <p>(?:abc) é um grupo não capturado, permite usar quantificadores para um grupo inteiro sem a necessidade de capturá-los como faria em um grupo.</p>
        <p>(?=abc) A correspondência acima só é verdadeira se este grupo for atendido. Por exemplo, a expressão {line}w+(?={line}d+) encontra as letras somente se forem seguidas por números.</p>
        <p>(?!abc) Negação do grupo especial anterior, ou seja, apenas a correspondência anterior é cumprida se este não for cumprido.</p>
    </item>
    <item>
        <searches>
            <search element="(?&lt;=abc)"/>
            <search element="(?&lt;!abc)"/>
        </searches>
        <p>(?&lt;=abc) A próxima correspondência só é verdadeira se este grupo for encontrado. Por exemplo, a expressão "(?&lt;=[A-Z])b" encontra a letra "b" somente se a letra anterior for uma letra maiúscula.</p>
        <p>(?&lt;!abc) Negação do grupo especial posterior, ou seja, apenas a correspondência posterior é cumprida se este não for cumprido.</p>
    </item>
    <item search="|">
        <p>Ele atua como um booleano, por exemplo "(hi|goodbye)" captura as palavras "hi" ou "goodbye".</p>
        <p>"[a-z]|{line}d" captura ou uma letra ou um número.</p>
    </item>
    <item search="\\u0036">
        <p>Expressão que permite obter um caractere por seu código ASCII.</p>
        <p>Na forma uFFFF, onde F é um número hexadecimal válido (0-9 e A-F)</p>
        <p>Neste caso, o número 26 em hexadecimal é 54 em decimal</p>ç        <p>Ele irá capturar o personagem 4 (ascii 54)</p>
    </item>

    <item search="\\1">
        <p>Expressão que permite reutilizar um grupo capturado pelo seu número.</p>
        <p>Por exemplo, para combinar o texto "hello hello", você poderia usar a expressão "({line}w{5}){line}s{line}1"</p>
        <p>{line}1 refere-se ao primeiro grupo capturado</p>
        <p>Isso corresponderá ao texto "hello hello"</p>
    </item>
</manual>