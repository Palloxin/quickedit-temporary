<?xml version="1.0" encoding="utf-8"?>
<manual>

    <item search="c">
        <p>The simplest expression is to look for a specific letter or word within a text. It works like in any program the option "Search".</p>
        <p>For example, if you look for the letter "d", the regular expression would look for this same letter "d". If we look for the word "hello", the expression would be "hello". As simple as that.</p>
    </item>
    <item search=".">
        <p>The point in regex defines any character (number, letter, special character).</p>

        <p>If we look for any character followed by the letter a, for example "5a", "da", "@a" the pattern would be the following ".a".</p>

        <p>This expression gives much to others, such as groups or quantifiers. For example if we want to find any 5 characters, we could use ".{5}".</p>
    </item>
    <item>
        <searches>
            <search element="\\w" />
            <search element="\\d" />
            <search element="\\s" />
        </searches>
        <p>The regular expressions "{line}w", "{line}d", "{line}s" define any letter, any digit or space respectively.</p>

        <p>Like the point can be defined with other expressions (groups, quantifiers). For example to find two letters followed by a space and a number (eg "aB 3") we could use this regex "{line}w{2}{line}s{line}d"</p>

    </item>

    <item>
        <searches>
            <search element="\\W" />
            <search element="\\D" />
            <search element="\\S" />
        </searches>
        <p>The regular expressions "{line}W", "{line}D", "{line}S" define a pattern where a letter, a digit or a space, respectively, is NOT found.</p>

        <p>That is to say it works as follows, if we look for any character other than space we could use "{line}S".</p>

        <p>For example, let's look for the text "5Q@." (Any character with no space), we could use {line}S{4}.</p>

    </item>

    <item search="[abc]">
        <p>This expression finds any match that is within the set.</p>
        <p>In this way, the expression [bcd] finds the texts "b", "c" or "d".</p>

        <p>You can also use expressions inside, for example [{line}w{line}d-@] you will find any alphanumeric character, hyphen or "@" symbol.</p>

        <p>Like the previous expressions can be grouped or use quantifiers.</p>

        <p>A special use of sets is the ranges, allows you to specify the number or letter from which you start and the last. For example [A-Z] would find any letter between the "A" and the "Z". (For lower case you can use [a-z].</p>

        <p>For example, to search for letters between "r" and "u" and between "c" and "e" you could use "[r-uc-e]".</p>

    </item>
    <item search="[^abc]">
        <p>It is the negation of a set, that is to say if [abc] found any coincidence with "a", "b" or "c". The negated set [^abc] will find any character other than "a", "b", "c".</p>

        <p>All set rules work in denial.</p>

    </item>
    <item>
        <searches>
            <search element="^" />
            <search element="$" />
        </searches>
        <p>The expressions "^" and "$" serve to mark the beginning and end of the string. For example, by looking for the pattern "a" you will find all the letters "a" in the text, however searching for "a $" will find the last letter of the string, if this is a.</p>

        <p>"5a" (string beginning with number) -> "^{line}d"</p>
    </item>

    <item search="\\b">
        <p>The expression {line}b is used to mark a non-visible character as the beginning and end of the string or spaces.</p>
        <p>For example: </p>
        <p>For the expression "{line}bye{line}b", you would find the text "ye" but not the text "bye" since b does not correspond to a space, beginning or end of string.</p>

    </item>

    <item search="\\B">
        <p>The expression {line}B is used to mark a non boundary word(visible character)</p>
        <p>For example: </p>
        <p>For the expression "{line}Bye", you would find the text "bye" but not the text "ye" since before there is a non-visible character (beginning of line)</p>

    </item>

    <item search="\\.">
        <p>When we want to find a character reserved by regex, we use the escaped "{line}" character.</p>

        <p>For example if we want to find a point at the end of the text, we can NOT use ". $" since the dot represents any character. So we used the Escaped character, this way it would look like "{line}.$".</p>

        <p>For example if I want to find the text "{line}w" I would use the expression "{line}{line}w".</p>

    </item>
    <item search="(abc)">
        <p>You can group the matches for replacement options or other utilities.</p>

        <p>For example, if we use this expression "^({line}w).+" Will look for any string that begins with a letter, but captures the initial letter.</p>

        <p>If we wanted to get it, using replace with the expression "$1" would return the initial letter.</p>

        <p>The +, *, and ? Function as quantifiers 1 or more, 0 or more, 0 or 1 respectively and can be used with the group, for example ({line}w{line}d)?a, match if it finds the "a" and/or if it has a letter or a number ahead.</p>


    </item>
    <item>
        <searches>
            <search element="(?:abc)" />
            <search element="(?=abc)" />
            <search element="(?!abc)" />
        </searches>
        <p>(?:abc) is an uncaught group, allows to use quantifiers to an entire group without the need for them to be captured as it would in a group.</p>

        <p>(?=abc) The above match is only true if this group is met. For example, the expression {line}w+(?={line}d+) finds the letters only if numbers follow.</p>

        <p>(?!abc) Denial of the previous special group, ie only the previous match is fulfilled if this is not fulfilled.</p>

    </item>

    <item>
        <searches>

            <search element="(?&lt;=abc)" />
            <search element="(?&lt;!abc)" />
        </searches>
        <p>(?&lt;=abc) The next match is only true if this group is met. For example, the expression (?&lt;=[A-Z])b finds the letter "b" only if the before letter is a uppercase letter.</p>

        <p>(?&lt;!abc) Denial of the after special group, ie only the after match is fulfilled if this is not fulfilled.</p>

    </item>

    <item search="|">
        <p>It acts as a boolean, for example (hi | goodbye) captures the words "hi" or "goodbye".</p>

        <p>{line}w|{line}d capture or a letter or a number.</p>

    </item>

    <item search="\\u0036">
        <p>Expression that allows you to get a character by its ascii code.</p>
        <p>In the form uFFFF, where F is a valid hexadecimal number(0-9 and A-F)</p>
        <p>In this case the number 26 in hexadecimal is 54 in decimal</p>รง
        <p>It will capture character 4 (ascii 54)</p>
    </item>
</manual>