<?xml version="1.0" encoding="utf-8"?>
<manual>

    <item search="c">
        <p>最も単純な表現は、特定の文字やテキスト内の単語を検索することです。どのプログラムの「検索」オプションと同様に機能します。
        </p>
        <p>例えば、「d」という文字を検索する場合、正規表現はその文字「d」を検索することになります。「hola」という単語を検索する場合、表現は「hola」になります。それほど簡単です。
        </p>
    </item>
    <item search=".">
        <p>正規表現でのドットは、任意の文字（数字、文字、特殊文字）を定義します。</p>

        <p>例えば、「5a」、「da」、「@a」のように、aの文字の後に任意の文字があるものを見つけたい場合、パターンは「.a」になります。</p>

        <p>この表現は、他のもの（グループや量指定子など）にも応用できます。例えば、任意の5文字を見つけたい場合は、「.{5}」を使用します。</p>
    </item>
    <item>
        <searches>
            <search element="\\w" />
            <search element="\\d" />
            <search element="\\s" />
        </searches>
        <p>正規表現「{line}w」、「{line}d」、「{line}s」は、それぞれ任意の文字、数字、空白を定義します。</p>

        <p>ドットと同様に、他の表現（グループ、量指定子など）で定義することができます。例えば、2文字の後に空白と数字が来る（例: 「aB 3」）ものを見つけたい場合、この正規表現{line}w{2}{line}s{line}dを使用できます</p>

    </item>

    <item>
        <searches>
            <search element="\\W" />
            <search element="\\D" />
            <search element="\\S" />
        </searches>
        <p>正規表現「{line}W」、「{line}D」、「{line}S」は、文字、数字、または空白がそれぞれ含まれていないパターンを定義します。</p>

        <p>つまり、空白以外の任意の文字を検索したい場合は「{line}S」を使用できます。</p>

        <p>例えば、「5Q@.」（空白以外の任意の文字）を検索する場合、{line}S{4}を使用できます</p>

    </item>

    <item search="[abc]">
        <p>この表現は、セット内のどの一致も見つけ出します。</p>
        <p>このように、表現[bcd]は「b」、「c」、または「d」のテキストを見つけ出します。</p>

        <p>また、内部で表現を使用することもできます。例えば、[{line}w{line}d-@]は、任意の英数字、ハイフン、または「@」記号を見つけ出します。</p>

        <p>前の表現と同様に、グループ化したり量指定子を使用したりすることができます。</p>

        <p>セットの特別な使用法には範囲があり、開始する数字や文字と最後の数字や文字を指定できます。例えば、[A-Z]は「A」から「Z」までの任意の大文字を見つけ出します。（小文字には[a-z]を使用します。数字には例えば[3-5]を使用して、3から5までの数字を検索できます。</p>

        <p>例えば、「r」と「u」の間、および「c」と「e」の間の文字を検索するには、「[r-uc-e]」を使用できます。</p>

    </item>
    <item search="[^abc]">
        <p>セットの否定、つまり[abc]が「a」、「b」、「c」と一致する任意の文字を見つけ出すのに対し、否定されたセット[^abc]は「a」、「b」、「c」以外の任意の文字を見つけ出します。</p>

        <p>セットのすべてのルールは否定にも適用されます。</p>

    </item>

    <item>
        <searches>
            <search element="^" />
            <search element="$" />
        </searches>
        <p>“^”と“$”の表現は、文字列の始まりと終わりを示します。例えば、“a”というパターンを検索すると、テキスト中のすべての“a”文字を見つけますが、“a$”を検索すると、それがaである場合に限り、文字列の最後の文字を見つけます。</p>

        <p>“5a”（数字で始まる文字列）-> “^{line}d”</p>
    </item>

    <item search="\\b">
        <p>表現{line}bは、文字列の開始と終了、または空白などの見えない文字を示します。</p>
        <p>例えば：</p>
        <p>表現"{line}bye{line}b"では、"ye"というテキストを見つけますが、"bye"というテキストは見つけません。なぜなら、bは空白、開始、または終了に対応していないからです。</p>

    </item>

    <item search="\\B">
        <p>表現{line}Bは、単語の境界でない（見える文字）を示します。</p>
        <p>例えば：</p>
        <p>表現"{line}Bye"では、"bye"というテキストを見つけますが、"ye"というテキストは見つけません。なぜなら、その前に見えない文字（行の開始）があるからです。</p>

    </item>

    <item search="\\.">
        <p>正規表現で予約された文字を見つけたい場合は、エスケープ文字“{line}”を使用します。</p>

        <p>例えば、テキストの最後に点を見つけたい場合は、“.$”を使用できません。なぜなら、点は任意の文字を表すからです。そこで、エスケープ文字を使用し、“{line}.$”とします。</p>

        <p>例えば、“{line}w”というテキストを見つけたい場合は、“{line}{line}w”という表現を使用します。</p>

    </item>
    <item search="(abc)">
        <p>一致するものをグループ化して、置換オプションや他の用途に使うことができます。</p>

        <p>例えば、この表現“^({line}w).+”を使用すると、文字で始まる任意の文字列を検索しますが、初期の文字をキャプチャします。</p>

        <p>それを取得したい場合は、置換に表現“$1”を使用して、初期の文字を返します。</p>

        <p>+、*、?文字はそれぞれ1回以上、0回以上、0回または1回の量指定子として機能し、グループと一緒に使用できます。例えば、({line}w{line}d)?aは、“a”とその前に文字または数字がある場合に一致します。</p>


    </item>
    <item>
        <searches>
            <search element="(?:abc)" />
            <search element="(?=abc)" />
            <search element="(?!abc)" />
        </searches>
        <p>(?:abc)はキャプチャされないグループで、グループ全体に量指定子を使用できるようにしますが、キャプチャグループのようには保持されません。</p>

        <p>(?=abc)この前の一致は、このグループが満たされた場合にのみ成立します。例えば、表現{line}w+(?={line}d+)は、数字に続く文字だけを見つけます。</p>

        <p>(?!abc)前の特別なグループの否定であり、このグループが満たされない場合にのみ前の一致が成立します。</p>

    </item>

    <item>
        <searches>

            <search element="(?&lt;=abc)" />
            <search element="(?&lt;!abc)" />
        </searches>
        <p>(?&lt;=abc)この後の一致は、このグループが満たされた場合にのみ成立します。例えば、表現(?&lt;=[A-Z])bは、前の文字が大文字である場合にのみ、"b"文字を見つけます。</p>
        <p>(?&lt;!abc)次の特別なグループの否定であり、このグループが満たされない場合にのみ次の一致が成立します。</p>

    </item>

    <item search="|">
        <p>ブール値として機能し、例えば(hola|adios)は“hola”または“adios”の単語をキャプチャします。</p>

        <p>{line}w|{line}dは、文字または数字のいずれかをキャプチャします。</p>

    </item>

    <item search="\\u0036">
        <p>ASCIIコードによる文字を取得するための表現です。</p>
        <p>uFFFFの構造に従いますが、Fは有効な16進数（0-9およびA-F）です</p>
        <p>この場合、26の16進数は10進数で54です</p>
        <p>したがって、文字4（ASCII 54）をキャプチャします</p>
    </item>

    <item search="\\1">
        <p>その番号によるグループを再度取得するための表現です。</p>
        <p>例えば、"hola hola"というテキストを見つけたい場合、表現"({line}w{4}){line}s{line}1"を使用できます</p>
        <p>{line}1は最初のグループを参照します</p>
        <p>"hola hola"というテキストをキャプチャします</p>

    </item>

</manual>